{"version":3,"sources":["navComponent/navigation.js","bodyComponent/contentNB.js","bodyComponent/contentT.js","bodyComponent/topicTrendRank.js","bodyComponent/trendGraph.js","App.js","serviceWorker.js","index.js"],"names":["navigation","state","search_value","_getProps","value","_this","setState","target","target_Type","keyword","keyword_Type","_targetSelectedChange","event","_keywordSelectedChange","_optionChange","argText","document","getElementById","_searchStart","_callee","regenerator_default","a","wrap","_context","prev","next","props","reSearch_event","stop","this","react_default","createElement","className","onChange","map","index","key","type","id","onClick","Component","contentNB","open","onOpenModal","onCloseModal","published_date","title","index_es","onClose","center","src","images","alt","dangerouslySetInnerHTML","__html","contentData","contentT","message","author","tweet_id","topicTrendRank","textData","rank","rankTitle","Chip_default","label","variant","trendGraph","Array","fill","reduce","curr","Object","toConsumableArray","concat","x","slice","y","Math","random","console","log","values","es","width","height","data","testt","App","apiKey","period_Type","criteria_Type","period","criteria","search_count","_setChangeOption","targetType","keywordType","search_data","_startSearch","search_Data","start","_start","argDate","topicTrendData","topicCountData","_data","_argDate","argDate2","argDate3","_getSearchData","sent","t0","fields","content","replace","abrupt","split","_getTopicTrendData","_getTrendSearchCount","date","push","orgCount","fetch","then","response","json","return_object","documents","catch","error","trends","length","nodes","trend","_renderBody","_renderBody_topicTrend","_rederBodyController","bodyComponent_trendGraph","_rederBody_contentNB","_rederBody_contentT","bodyComponent_contentNB","bodyComponent_contentT","bodyComponent_topicTrendRank","name","navComponent_navigation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5deff87.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass navigation extends Component {\r\n\r\n    state = {\r\n        search_value : null\r\n    }\r\n\r\n    // 사용되는 변수를 받아서 저장\r\n    componentWillMount(){\r\n        this._getProps(this.props)\r\n    }\r\n\r\n    // 받은 props 저장\r\n    _getProps = (value) => {\r\n        this.setState({\r\n            target : value.target_Type[0],\r\n            keyword : value.keyword_Type[0]\r\n        })\r\n    }\r\n    \r\n    // 타겟 변경\r\n    _targetSelectedChange = (event) => {\r\n        this.setState({\r\n            target : event.target.value\r\n        })\r\n    }\r\n\r\n    // 키워드 타입 변경\r\n    _keywordSelectedChange = (event) => {\r\n        this.setState({\r\n            keyword : event.target.value\r\n        })\r\n    }\r\n\r\n    // 옵션 변경 \r\n    _optionChange = () => {\r\n        const argText = document.getElementById('search_keyword').value\r\n        this.setState({\r\n            search_value : argText\r\n        })\r\n        return true\r\n    }\r\n\r\n    // 재검색 요청\r\n    _searchStart = async() =>{\r\n        await this._optionChange()\r\n        this.props.reSearch_event(this.state.target, this.state.keyword, this.state.search_value)\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props)\r\n        return(\r\n            <div className=\"navigtion_origin\">\r\n                <select onChange={this._targetSelectedChange} >\r\n                    {this.props.target_Type.map((value, index) => {\r\n                        return <option value={value} key={index} >{value}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <select onChange={this._keywordSelectedChange} >\r\n                    {this.props.keyword_Type.map((value, index) => {\r\n                        return <option value={value} key={index} >{value}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <input type=\"Text\" id=\"search_keyword\"></input>\r\n                <button onClick={this._searchStart}>Search</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default navigation","import React, { Component } from 'react'\r\nimport Modal from 'react-responsive-modal';\r\nimport './content.css';\r\nclass contentNB extends Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    onOpenModal = () => {\r\n        this.setState({ open: true });\r\n    };\r\n     \r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        const { open } = this.state;\r\n        return (\r\n            <div>\r\n                <div onClick={this.onOpenModal}> {this.props.published_date} {this.props.title} </div>\r\n                <Modal open={open} onClose={this.onCloseModal} center >\r\n                       <h2> {this.props.title} </h2>\r\n                    <p>\r\n                        {this.props.published_date}\r\n                    </p>\r\n                    <div>\r\n                        <img src={this.props.images} alt={this.props.images}/>\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.contentData} }> \r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 메테리얼 ui 찾아보기 나~중에\r\n\r\n// class modalContent extends Component {}\r\n\r\n\r\n\r\nexport default contentNB","import React, { Component } from 'react'\r\nimport Modal from 'react-responsive-modal';\r\n\r\n\r\nclass contentT extends Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    onOpenModal = () => {\r\n        this.setState({ open: true });\r\n    };\r\n     \r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        const { open } = this.state;\r\n        return (\r\n            <div>\r\n                <div onClick={this.onOpenModal}> {this.props.published_date} {this.props.message} </div>\r\n                <Modal open={open} onClose={this.onCloseModal} center>\r\n                    <h2> {this.props.author} ( {this.props.tweet_id} ) </h2>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.published_date} }> \r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.message} }> \r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 메테리얼 ui 찾아보기 나~중에\r\n\r\n// class modalContent extends Component {}\r\n\r\n\r\nexport default contentT","import React, { Component } from 'react'\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nclass topicTrendRank extends Component {\r\n\r\n    render() {\r\n        const textData = this.props.rank + \"위 -\" + this.props.rankTitle\r\n        return ( \r\n            <div className=\"RankingDiv\">\r\n                <Chip label= {textData} variant=\"outlined\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default topicTrendRank  ","import React, { Component } from 'react'\r\nimport {AreaSeries, XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines} from 'react-vis';\r\n//LineMarkSeries, LineSeries\r\n\r\nclass trendGraph extends Component {\r\n    \r\n    \r\n    render() {\r\n        const data = new Array(19).fill(0).reduce((prev, curr) => [...prev, {\r\n            x: prev.slice(-1)[0].x + 1,\r\n            y: prev.slice(-1)[0].y * (0.9 + Math.random() * 0.2) \r\n          }], [{x: 0, y: 10}]);\r\n            \r\n        console.log(this.props.values)\r\n        return (\r\n            <div id=\"chart\">\r\n                <XYPlot width={1500} height={200}>\r\n                <XAxis/>\r\n                <YAxis/>\r\n                <HorizontalGridLines />\r\n                <VerticalGridLines />\r\n                <AreaSeries \r\n                    data={this.props.testt}\r\n                />\r\n                </XYPlot>;\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default trendGraph","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './navComponent/navigation'\nimport ContentNB from './bodyComponent/contentNB'\nimport ContentT from './bodyComponent/contentT'\nimport TopicTrendRank from './bodyComponent/topicTrendRank'\nimport TrendGraph from './bodyComponent/trendGraph'\n\nclass App extends Component {\n\n  // 검색 조건 수정에 사용되는 기본 변수들\n  // 받아온 데이터를 저장할 변수들\n  state = {\n    apiKey : \"4370168664877217907\",\n\n    target_Type : [\n      'news', 'twitter', 'blog'\n    ],\n    keyword_Type : [\n      'single', 'multiple'\n    ],\n    period_Type : [\n\n    ],\n    criteria_Type : [\n      \"title\", \"context\"\n    ],\n\n    target : 'news',\n    keyword : 'single',\n    period : null,\n    criteria : \"title\",\n    search_value : \"삼성\",\n    search_count : \"30\"\n  }\n\n  componentWillMount(){\n    this._startSearch()\n  }\n\n   // 조건 변경 => state 감지 => 검색\n   _setChangeOption = (targetType, keywordType, search_data) => {\n\n    this.setState({\n      target : targetType,\n      keyword : keywordType,\n      search_value : search_data\n    })\n\n    this._startSearch()\n  }\n\n  // 검색 시작 (검색함수 호출 및 저장)\n  _startSearch = async() => {\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n    // 기본 문서\n    const search_Data = await this._getSearchData()\n\n    switch(this.state.target){\n      case 'news' :\n        // 첫 번째 줄만 줄바꿈 후, 다음 문장을 띄어쓰기 해준다.\n        for(let start in search_Data){\n          search_Data[start].fields.content[0] = search_Data[start].fields.content[0].replace('\\n', '<br />&nbsp&nbsp')\n          // /(\\n|\\r\\n)/g\n        }\n        break;\n      case 'blog' :\n        // 모든 문장을 줄바꿈처리한다.\n        for(let start in search_Data){\n          search_Data[start].fields.content[0] = search_Data[start].fields.content[0].replace(/(\\n|\\r\\n)/g, '<br />&nbsp&nbsp')\n          // /(\\n|\\r\\n)/g \n        }\n        break;\n      case 'twitter' :\n        break;\n      default : \n        console.log(\"replaceDOM Error_startSerch funtion\")\n        break;\n    }\n    \n    // 문서의 날짜값 정리\n    for(let data in search_Data){\n      let argDate = search_Data[data].fields.published_date[0].split(\"T\")  \n      search_Data[data].fields.published_date[0] = argDate[0] \n    }\n\n    // 문서 저장\n    this.setState({\n      search_Data\n    })\n\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n\n    // 연관검색어 (키워드 유무 확인)\n    if(this.state.search_value !== \"\"){\n      const topicTrendData = await this._getTopicTrendData()\n      // 연관검색어 저장\n      this.setState({\n        topicTrendData\n      })\n\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n      // 기간별 검색 횟수\n      const topicCountData = await this._getTrendSearchCount()\n\n      let testt = new Array();\n      // 문서의 날짜값 정리\n      for(let data in topicCountData){\n        let argDate = topicCountData[data].date.split(\"T\")  \n        topicCountData[data].date = argDate[0] \n\n        //\n        let argDate2 = topicCountData[data].date.split('-')\n        let argDate3 = argDate2[1] + argDate2[2]\n        testt.push({ \"x\" : argDate3 , \"y\" : topicCountData[data].orgCount })\n      }\n      console.log(testt)\n      // 저장\n      this.setState({\n        topicCountData,\n        testt\n      })\n      console.log(topicCountData)\n    }\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n  }\n\n  // 문서 검색 함수 ADAMs.api\n  _getSearchData = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/search?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target \n                    + \"&keyword=\" + this.state.search_value\n                    + \"&count=\" + this.state.search_count)\n    .then((response) => response.json())\n    .then((json) => json.return_object[0].documents)\n    .catch((error) => {\n      console.log(\"getSocial Err :\" + error);\n    })\n  }\n\n  // 연관 검색어  ADAMs.api\n  _getTopicTrendData = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/topictrend?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target \n                    + \"&keyword=\" + this.state.search_value)\n    .then((response) => response.json())\n    .then((json) => json.return_object.trends[json.return_object.trends.length - 1].nodes)\n    .catch((error) => {\n      console.log(\"getTopicTrend Err :\" + error);\n    })\n  }\n\n  // 검색 빈도(횟수) ADAMs.api\n  _getTrendSearchCount = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/trend?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target\n                    + \"&keyword=\" + this.state.search_value\n                    + \"&timeunit=day\" )\n    .then((response) => response.json())\n    .then((json) => json.return_object.trend[0].data)\n    .catch((error) => {\n      console.log(\"getTrendSearch Err :\" + error)\n    })\n  }\n\n  // body 랜더링\n\n  // new & blog  !! new의 category 제외\n  // title / image / published_date / content\n\n  // twitter \n  // author / tweet_id / published_date / message\n\n  // { this._renderBody_topicTrend() }\n  _renderBody = () => {\n    return (\n    <div className=\"App_body\">\n      <div className=\"body\">\n        <div className=\"body_trend\">\n          { this.state.topicTrendData ? this._renderBody_topicTrend() : \"not data\"}\n        </div>\n        <div className=\"body_context\">\n          { this._rederBodyController(this.state.target)}  \n        </div>\n      </div>\n        <div id=\"chart\">\n          <TrendGraph \n            values = {this.state.topicCountData}\n            testt = {this.state.testt}\n          />\n          <div id=\"graphTest\"></div>\n        </div>\n    </div>\n    )\n  }\n\n  // body rander controller\n  _rederBodyController = (target) => {\n    switch(target){\n      case \"news\" : \n      case \"blog\" :\n        return this._rederBody_contentNB()\n      case \"twitter\" : \n        return this._rederBody_contentT()\n      default :\n       console.log(\"renderBody Error\")\n    }\n  }\n\n  // news blog\n  _rederBody_contentNB = () => {\n      return this.state.search_Data.map((data, index) => {\n        return <ContentNB \n          title = {data.fields.title}\n          images = {data.fields.images}\n          published_date = {data.fields.published_date}\n          contentData = {data.fields.content}\n          key = {index}\n        />\n      })\n  }\n\n  // twitter \n  _rederBody_contentT = () => {\n    return this.state.search_Data.map((data, index) => {\n      return <ContentT \n        author = {data.fields.author}\n        tweet_id = {data.fields.tweet_id}\n        published_date = {data.fields.published_date}\n        message = {data.fields.message}\n        key = {index}\n      />\n    })\n  }\n\n  // 연관검색어\n  _renderBody_topicTrend = () => {\n    return this.state.topicTrendData.map((data) => {\n      return <TopicTrendRank \n        rankTitle = {data.name}\n        rank = {data.id}\n        key = {data.id}\n      />\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App_nav\">\n          { <Navigation \n            target_Type   = { this.state.target_Type  }\n            keyword_Type  = { this.state.keyword_Type }\n            criteria_Type = { this.state.criteria_Type} \n            reSearch_event = { this._setChangeOption }\n          /> }\n        </div>\n          { this.state.search_Data ? this._renderBody() : \"loading\" }\n          \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}