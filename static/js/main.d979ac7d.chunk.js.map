{"version":3,"sources":["navComponent/navigation.js","bodyComponent/contentNB.js","bodyComponent/contentT.js","bodyComponent/topicTrendRank.js","bodyComponent/trendGraph.js","App.js","serviceWorker.js","index.js"],"names":["navigation","state","search_value","search_value_second","multiple","_getProps","value","_this","setState","target","target_Type","keyword","keyword_Type","_targetSelectedChange","event","_keywordSelectedChange","_optionChange","argText","document","getElementById","argTextSecond","_searchStart","_callee","regenerator_default","a","wrap","_context","prev","next","props","reSearch_event","stop","this","_enterSearch","window","keyCode","_enterFocusChange","focus","react_default","createElement","className","onChange","map","index","key","TextField_default","id","label","placeholder","variant","onKeyUp","Component","contentNB","open","onOpenModal","onCloseModal","Button_default","onClick","color","published_date","title","index_es","onClose","center","src","images","alt","dangerouslySetInnerHTML","__html","contentData","contentT","message","author","tweet_id","topicTrendRank","textData","rank","rankTitle","Chip_default","trendGraph","data","labels","scaleX","datasets","tension","borderColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","radius","borderWidth","pointHitRadius","scaleY","es","width","height","App","apiKey","period_Type","criteria_Type","period","criteria","search_count","loading","_setLoadingValue","bool","_setChangeOption","targetType","keywordType","search_data","search_value_data","_startSearch","_multipleDOMSearch","datas","rewriteDatas","Array","addr","fields","content","includes","push","argContent","ContentData","indexOf","split","contentAddr","length","console","log","search_Data","argData","start","_start","argDate","topicTrendData","topicCountData","TrendGraphDate","TrendGraphCount","_data","_argDate","argDate2","argDate3","_getSearchData","sent","t0","t1","call","pop","t2","replace","abrupt","_getTopicTrendData","_getTrendSearchCount","date","orgCount","fetch","then","response","json","return_object","documents","catch","error","trends","nodes","trend","_renderBody","_renderBody_topicTrend","_rederBodyController","_rederBody_contentNB","_rederBody_contentT","bodyComponent_contentNB","bodyComponent_contentT","src_bodyComponent_topicTrendRank","name","src_navComponent_navigation","CircularProgress_default","size","src_bodyComponent_trendGraph","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d979ac7d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport './navigation.css'\r\n\r\nclass navigation extends Component {\r\n\r\n    state = {\r\n        search_value : \"\",\r\n        search_value_second : \"\",\r\n        multiple : false\r\n    }\r\n\r\n    // 사용되는 변수를 받아서 저장\r\n    componentWillMount(){\r\n        this._getProps(this.props)\r\n    }\r\n\r\n    // 받은 props 저장\r\n    _getProps = (value) => {\r\n        this.setState({\r\n            target : value.target_Type[0],\r\n            keyword : value.keyword_Type[0]\r\n        })\r\n    }\r\n    \r\n    // 타겟 변경\r\n    _targetSelectedChange = (event) => {\r\n        this.setState({\r\n            target : event.target.value\r\n        })\r\n    }\r\n\r\n    // 키워드 타입 변경\r\n    _keywordSelectedChange = (event) => {\r\n        this.setState({\r\n            keyword : event.target.value\r\n        })\r\n\r\n        if(event.target.value === \"multiple\"){\r\n            this.setState({\r\n                multiple : true\r\n            })\r\n        }else{\r\n            this.setState({\r\n                multiple : false\r\n            })\r\n        }\r\n    }\r\n\r\n    // 옵션 변경 \r\n    _optionChange = () => {\r\n        const argText = document.getElementById('search_keyword').value\r\n        this.setState({\r\n            search_value : argText\r\n        })\r\n        if(this.state.multiple === true){\r\n            const argTextSecond = document.getElementById('search_keyword_second').value\r\n            this.setState({\r\n                search_value_second : argTextSecond\r\n            })\r\n        }\r\n        return true\r\n    }\r\n\r\n    // 재검색 요청\r\n    _searchStart = async() =>{\r\n        await this._optionChange()\r\n        this.props.reSearch_event(this.state.target, this.state.keyword, this.state.search_value, this.state.search_value_second)\r\n    }\r\n\r\n    // 엔터 감지\r\n    _enterSearch = () => {\r\n        if(window.event.keyCode === 13){\r\n            this._searchStart() \r\n        }\r\n    }\r\n\r\n    // multiple 이 true 일 때, 함수를 교체하여 실행\r\n    // 2번째 키워드로 focus를 이동시킨다.\r\n    _enterFocusChange = () => {\r\n        if(window.event.keyCode === 13){\r\n            document.getElementById('search_keyword_second').focus()\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        //console.log(this.props)\r\n        return(\r\n            <div className=\"navigtion_origin\">\r\n                <select onChange={this._targetSelectedChange} className=\"select_Type\">\r\n                    {this.props.target_Type.map((value, index) => {\r\n                        return <option value={value} key={index} >{value}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <select onChange={this._keywordSelectedChange} className=\"select_Type\">\r\n                    {this.props.keyword_Type.map((value, index) => {\r\n                        return <option value={value} key={index} >{value}</option>\r\n                    })}\r\n                </select>\r\n                \r\n                <TextField\r\n                    id=\"search_keyword\"\r\n                    label=\"input SearchData\"\r\n                    placeholder=\"press Enter\"\r\n                    variant=\"outlined\"\r\n                    onKeyUp={this.state.multiple ? this._enterFocusChange : this._enterSearch}\r\n                />\r\n                {this.state.multiple ? \r\n                <TextField\r\n                    id=\"search_keyword_second\"\r\n                    label=\"input SearchData\"\r\n                    placeholder=\"press Enter\"\r\n                    variant=\"outlined\"\r\n                    onKeyUp={this._enterSearch}\r\n                /> \r\n                : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default navigation","import React, { Component } from 'react'\r\nimport Modal from 'react-responsive-modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport './content.css';\r\n\r\nclass contentNB extends Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    onOpenModal = () => {\r\n        this.setState({ open: true });\r\n    };\r\n     \r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n\r\n        const { open } = this.state;\r\n        return (\r\n            <div className=\"contentArea\">\r\n                <Button onClick={this.onOpenModal} variant=\"contained\" color=\"primary\" className=\"contButton\"> \r\n                    ( {this.props.published_date} ) {this.props.title}\r\n                </Button>\r\n\r\n                <Modal open={open} onClose={this.onCloseModal} center >\r\n                       <h2> {this.props.title} </h2>\r\n                    <p>\r\n                        {this.props.published_date}\r\n                    </p>\r\n                    <div>\r\n                        <img src={this.props.images} alt={this.props.images}/>\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.contentData} }> \r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 메테리얼 ui 찾아보기 나~중에\r\n\r\n// class modalContent extends Component {}\r\n\r\n\r\n\r\nexport default contentNB","import React, { Component } from 'react'\r\nimport Modal from 'react-responsive-modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport './content.css';\r\n\r\n\r\nclass contentT extends Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    onOpenModal = () => {\r\n        this.setState({ open: true });\r\n    };\r\n     \r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        const { open } = this.state;\r\n        return (\r\n            <div className=\"contentArea\">\r\n                <Button onClick={this.onOpenModal} variant=\"contained\" color=\"primary\" className=\"contButton\">\r\n                    ( {this.props.published_date} {this.props.message} )\r\n                </Button>\r\n\r\n                <Modal open={open} onClose={this.onCloseModal} center>\r\n                    <h2> {this.props.author} ( {this.props.tweet_id} ) </h2>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.published_date} }> \r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={ {__html: this.props.message} }> \r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 메테리얼 ui 찾아보기 나~중에\r\n\r\n// class modalContent extends Component {}\r\n\r\n\r\nexport default contentT","import React, { Component } from 'react'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport './topicTrendRank.css'\r\n\r\nclass topicTrendRank extends Component {\r\n\r\n    render() {\r\n        const textData = this.props.rank + \"위 -\" + this.props.rankTitle\r\n        return ( \r\n            <div className=\"RankingDiv\">\r\n                <Chip label= {textData} variant=\"outlined\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default topicTrendRank  ","import React, { Component } from 'react'\r\n//import {AreaSeries, XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines} from 'react-vis';\r\n//LineMarkSeries, LineSeries\r\nimport {Line} from 'react-chartjs-2';\r\nimport './trendGraph.css'\r\n\r\nclass trendGraph extends Component{\r\n    \r\n    render() {\r\n        const data = {\r\n            labels: this.props.scaleX,\r\n            datasets: [\r\n              {\r\n                label: 'Search_Count',\r\n                tension: 0,\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                radius: 0,\r\n                borderWidth: 1,\r\n                pointHitRadius: 5,\r\n                data: this.props.scaleY\r\n              }\r\n            ]\r\n          }\r\n      return (\r\n        <div className=\"chart\">\r\n          <h2>Trend Graph(Day)</h2>\r\n          <Line \r\n            width={100}\r\n            height={15}\r\n            data={data} \r\n          />\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default trendGraph","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './navComponent/navigation'\nimport ContentNB from './bodyComponent/contentNB'\nimport ContentT from './bodyComponent/contentT'\nimport TopicTrendRank from './bodyComponent/topicTrendRank'\nimport TrendGraph from './bodyComponent/trendGraph'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nclass App extends Component {\n\n  // 검색 조건 수정에 사용되는 기본 변수들\n  // 받아온 데이터를 저장할 변수들\n  state = {\n    apiKey : \"4370168664877217907\",\n\n    target_Type : [\n      'news', 'twitter', 'blog'\n    ],\n    keyword_Type : [\n      'single', 'multiple'\n    ],\n    period_Type : [\n\n    ],\n    criteria_Type : [\n      \"title\", \"context\"\n    ],\n\n    target : 'news',\n    keyword : 'single',\n    period : null,\n    criteria : \"title\",\n\n    search_value : \"삼성\",\n    search_value_second : \"\",\n\n    search_count : \"30\",\n\n    loading : false\n  }\n\n  componentWillMount(){\n    this._startSearch()\n  }\n\n  // state 의 loading 값을 변경\n  _setLoadingValue = (bool) => {\n    this.setState({\n      loading : bool\n    })\n  }\n\n   // 조건 변경 => state 감지 => 검색\n   _setChangeOption = (targetType, keywordType, search_data, search_value_data) => {\n\n    this.setState({\n      target : targetType,\n      keyword : keywordType,\n      search_value : search_data,\n      search_value_second : search_value_data\n    })\n\n    this._startSearch()\n  }\n\n  // 2중 키워드 문서 정리\n  _multipleDOMSearch = (datas) =>{\n\n    let rewriteDatas = new Array()\n    //console.log(argData)\n  \n    // 해당하는 것으로 교체\n    for(let addr in datas){\n      // console.log(datas[addr].fields.content[0].includes(this.state.search_value_second))\n      if(datas[addr].fields.content[0].includes(this.state.search_value_second) || \n      datas[addr].fields.title[0].includes(this.state.search_value_second)){\n        rewriteDatas.push(datas[addr])\n      }\n    }\n\n    let argContent = null\n    // 형광팬 처리\n    for(let addr in rewriteDatas){\n\n      let ContentData = new Array()\n      // 나중에 따로 함수화\n      // 내용 (첫번째 키워드)\n      if(rewriteDatas[addr].fields.content[0].indexOf(this.state.search_value)){\n        // 키워드를 기준으로 분리\n        ContentData = rewriteDatas[addr].fields.content[0].split(this.state.search_value)\n        // 재조합\n        for(let contentAddr=0; contentAddr < ContentData.length; contentAddr++){\n          if(contentAddr >= ContentData.length -1){\n            // 마지막엔 그냥 붙이기\n            argContent += ContentData[contentAddr]\n          }else{\n            argContent += ContentData[contentAddr] + \"<span style='background-color:yellow'>\" + this.state.search_value + \"</span>\"\n          }\n        }\n        rewriteDatas[addr].fields.content[0] = argContent\n        console.log(argContent)\n      }\n\n      // 두번째 키워드\n      if(rewriteDatas[addr].fields.content[0].indexOf(this.state.search_value_second)){\n        // 키워드를 기준으로 분리\n        ContentData = rewriteDatas[addr].fields.content[0].split(this.state.search_value_second)\n        // 재조합\n        for(let contentAddr=0; contentAddr < ContentData.length; contentAddr++){\n          if(contentAddr >= ContentData.length -1){\n            // 마지막엔 그냥 붙이기\n            argContent += ContentData[contentAddr]\n          }else{\n            argContent += ContentData[contentAddr] + \"<span style='background-color:#00FEFE'>\" + this.state.search_value_second + \"</span>\"\n          }\n        }\n        rewriteDatas[addr].fields.content[0] = argContent\n        console.log(argContent)\n      }\n    }\n\n    //console.log(rewriteDatas)\n    return rewriteDatas;\n  }\n\n  // 검색 시작 (검색함수 호출 및 저장)\n  _startSearch = async() => {\n    this._setLoadingValue(true)\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n    // 기본 문서\n    let search_Data = await this._getSearchData()\n\n\n    // keyword(Type) = mutiple\n    if(this.state.keyword === \"multiple\"){\n      let argData = new Array()\n      // console.log(await this._multipleDOMSearch(search_Data))\n      argData.push(await this._multipleDOMSearch(search_Data))\n      // Reset search_Data\n      search_Data = []\n      search_Data = argData.pop()\n\n      console.log(search_Data)\n    }\n\n    switch(this.state.target){\n      case 'news' :\n        // 첫 번째 줄만 줄바꿈 후, 다음 문장을 띄어쓰기 해준다.\n        for(let start in search_Data){\n          search_Data[start].fields.content[0] = search_Data[start].fields.content[0].replace('\\n', '<br />&nbsp&nbsp')\n          // /(\\n|\\r\\n)/g\n        }\n        break;\n      case 'blog' :\n        // 모든 문장을 줄바꿈처리한다.\n        for(let start in search_Data){\n          search_Data[start].fields.content[0] = search_Data[start].fields.content[0].replace(/(\\n|\\r\\n)/g, '<br />&nbsp&nbsp')\n          // /(\\n|\\r\\n)/g \n        }\n        break;\n      case 'twitter' :\n        break;\n      default : \n        console.log(\"replaceDOM Error_startSerch funtion\")\n        break;\n    }\n    \n    // 문서의 날짜값 정리\n    for(let data in search_Data){\n      let argDate = search_Data[data].fields.published_date[0].split(\"T\")  \n      search_Data[data].fields.published_date[0] = argDate[0] \n    }\n\n    // 문서 저장\n    this.setState({\n      search_Data\n    })\n\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n\n    // 연관검색어 (키워드 유무 확인)\n    if(this.state.search_value !== \"\"){\n      const topicTrendData = await this._getTopicTrendData()\n      // 연관검색어 저장\n      this.setState({\n        topicTrendData\n      })\n\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n      // 기간별 검색 횟수\n      const topicCountData = await this._getTrendSearchCount()\n\n      let TrendGraphDate = new Array([]);\n      let TrendGraphCount = new Array([]);\n\n      // 문서의 날짜값 정리\n      for(let data in topicCountData){\n        let argDate = topicCountData[data].date.split(\"T\")  \n        topicCountData[data].date = argDate[0] \n\n        //\n        let argDate2 = topicCountData[data].date.split('-')\n        let argDate3 = argDate2[1] + \"/\" + argDate2[2]\n        TrendGraphDate.push( argDate3 )\n        TrendGraphCount.push( topicCountData[data].orgCount )\n        \n      }\n\n      //console.log(TrendGraphDate)\n      //console.log(TrendGraphCount)\n\n      // 저장\n      this.setState({\n        TrendGraphDate,\n        TrendGraphCount\n      })\n    }\n    /* ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ */\n    this._setLoadingValue(false)\n  }\n\n  // 문서 검색 함수 ADAMs.api\n  _getSearchData = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/search?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target \n                    + \"&keyword=\" + this.state.search_value\n                    + \"&count=\" + this.state.search_count)\n    .then((response) => response.json())\n    .then((json) => json.return_object[0].documents)\n    .catch((error) => {\n      console.log(\"getSocial Err :\" + error);\n    })\n  }\n\n  // 연관 검색어  ADAMs.api\n  _getTopicTrendData = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/topictrend?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target \n                    + \"&keyword=\" + this.state.search_value)\n    .then((response) => response.json())\n    .then((json) => json.return_object.trends[json.return_object.trends.length - 1].nodes)\n    .catch((error) => {\n      console.log(\"getTopicTrend Err :\" + error);\n    })\n  }\n\n  // 검색 빈도(횟수) ADAMs.api\n  _getTrendSearchCount = () => {\n    return fetch(\"http://api.adams.ai/datamixiApi/trend?key=\" + this.state.apiKey \n                    + \"&target=\" + this.state.target\n                    + \"&keyword=\" + this.state.search_value\n                    + \"&timeunit=day\" )\n    .then((response) => response.json())\n    .then((json) => json.return_object.trend[0].data)\n    .catch((error) => {\n      console.log(\"getTrendSearch Err :\" + error)\n    })\n  }\n\n  // body 랜더링\n\n  // new & blog  !! new의 category 제외\n  // title / image / published_date / content\n\n  // twitter \n  // author / tweet_id / published_date / message\n\n  // { this._renderBody_topicTrend() }\n  _renderBody = () => {\n    return (\n    <div className=\"body\">\n      <div className=\"body_trend\">\n        { this.state.topicTrendData ? this._renderBody_topicTrend() : \"not data\"}\n      </div>\n      <div className=\"body_context\">\n        { this._rederBodyController(this.state.target)}  \n      </div>\n    </div>\n    )\n  }\n\n  // body rander controller\n  _rederBodyController = (target) => {\n    switch(target){\n      case \"news\" : \n      case \"blog\" :\n        return this._rederBody_contentNB()\n      case \"twitter\" : \n        return this._rederBody_contentT()\n      default :\n       console.log(\"renderBody Error\")\n    }\n  }\n\n  // news blog\n  _rederBody_contentNB = () => {\n      return this.state.search_Data.map((data, index) => {\n        return <ContentNB \n          title = {data.fields.title}\n          images = {data.fields.images}\n          published_date = {data.fields.published_date}\n          contentData = {data.fields.content}\n          key = {index}\n        />\n      })\n  }\n\n  // twitter \n  _rederBody_contentT = () => {\n    return this.state.search_Data.map((data, index) => {\n      return <ContentT \n        author = {data.fields.author}\n        tweet_id = {data.fields.tweet_id}\n        published_date = {data.fields.published_date}\n        message = {data.fields.message}\n        key = {index}\n      />\n    })\n  }\n\n  // 연관검색어\n  _renderBody_topicTrend = () => {\n    return this.state.topicTrendData.map((data) => {\n      return <TopicTrendRank \n        rankTitle = {data.name}\n        rank = {data.id}\n        key = {data.id}\n      />\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navigation\">\n          { <Navigation \n            target_Type   = { this.state.target_Type  }\n            keyword_Type  = { this.state.keyword_Type }\n            criteria_Type = { this.state.criteria_Type} \n            reSearch_event = { this._setChangeOption }\n          /> }\n        </div>\n        { this.state.loading ?\n        <div className=\"App_body_loading\"> \n          <CircularProgress size={100} /> \n        </div> \n        :  \n        <div className=\"App_body\">\n          { this.state.search_Data ? this._renderBody() : \"loading\" }\n \n          <TrendGraph \n            scaleX = {this.state.TrendGraphDate}\n            scaleY = {this.state.TrendGraphCount}\n          />\n        </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}